import{_ as s,c as i,o as a,a2 as e}from"./chunks/framework.BV61Qrc0.js";const E=JSON.parse('{"title":"基础语法","description":"","frontmatter":{},"headers":[],"relativePath":"solidity/base.md","filePath":"solidity/base.md"}'),l={name:"solidity/base.md"},t=e(`<h1 id="基础语法" tabindex="-1">基础语法 <a class="header-anchor" href="#基础语法" aria-label="Permalink to &quot;基础语法&quot;">​</a></h1><p>一份 <code>Solidity</code> 源代码文件可以包含多个合约（<code>contract</code>）定义、引入（<code>import</code>）指令和命令（<code>pragma</code>）指令。</p><h2 id="helloworld" tabindex="-1">HelloWorld <a class="header-anchor" href="#helloworld" aria-label="Permalink to &quot;HelloWorld&quot;">​</a></h2><p>以下是使用 <code>Solidity</code> 语言编写的一个简单的 <code>helloworld</code>智能合约：</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pragma</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> solidity</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ^0.8.4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">contract</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HelloWorld</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sayHello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> pure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> returns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> memory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这个智能合约定义了一个名为 <code>HelloWorld</code> 的合约，包含一个名为<code> sayHello</code> 的公有函数，该函数返回一个字符串<code>“Hello World!”</code>。在代码的开头，使用 <code>pragma solidity</code> 指令指定了编译器的版本，以确保合约可以正常编译和执行。</p><p>此智能合约可以部署到以太坊网络上，并在以太坊的网络中产生一个地址。</p><p>这个简单的helloworld智能合约展示了Solidity的一些基本语法，包括pragma指令、contract定义和函数定义。需要注意的是，所有智能合约函数执行 <code>写操作</code> 都会消耗以太币作为交易费用，即所谓的 <code>“Gas费用”</code>。因此需要谨慎设计合约函数和交互方式，以尽可能高效地使用 <code>Gas</code>。</p>`,8),n=[t];function o(d,p,h,r,k,c){return a(),i("div",null,n)}const g=s(l,[["render",o]]);export{E as __pageData,g as default};
