import{_ as s,c as i,o as a,a2 as n}from"./chunks/framework.BV61Qrc0.js";const y=JSON.parse('{"title":"调用父类构造函数","description":"","frontmatter":{},"headers":[],"relativePath":"solidity/call-parent.md","filePath":"solidity/call-parent.md"}'),t={name:"solidity/call-parent.md"},l=n(`<h1 id="调用父类构造函数" tabindex="-1">调用父类构造函数 <a class="header-anchor" href="#调用父类构造函数" aria-label="Permalink to &quot;调用父类构造函数&quot;">​</a></h1><p>在 <code>Solidity</code> 中，如果您需要在子合约中使用父合约的构造函数，您可以使用 <code>super</code> 关键字来调用它。</p><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><p>下面是一个简单的 <code>Solidity</code> 程序演示如何调用父合约的构造函数。</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//定义父合约</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">contract</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ParentContract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    uint</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _value) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _value;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//定义子合约并继承父合约</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">contract</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ChildContract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> is</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ParentContract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _value) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ParentContract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_value) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//部署合约</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ChildContract child </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ChildContract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>解释：</p><p>在上面的程序中首先定义了一个父合约 <code>ParentContract</code> 并且在构造函数中初始化了一个变量 <code>value</code>。</p><p>然后我们定义了一个名为 <code>ChildContract</code> 的子合约，并通过关键字“is”来表示 <code>ChildContract</code> 继承了 <code>ParentContract。</code></p><p>在子合约中，我们使用了 <code>super</code> 关键字来调用父合约的构造函数，并传递一个值作为参数。</p><p>最后，我们使用 <code>new</code> 关键字来实例化一个 <code>ChildContract</code> 合约，并传递一个值给父合约的构造函数。</p><p>请注意，我们定义 <code>ChildContract</code> 构造函数的方法是通过调用父构造函数传递一个值。</p><p>这是因为在子合约的构造函数执行前，父构造函数必须要被调用。因此，我们通常都是通过在子构造函数的参数列表中调用父构造函数来实现这一点。</p><p>这就是 <code>Solidity</code> 中如何调用父合约构造函数的一个简单演示。</p>`,13),p=[l];function e(h,k,d,r,c,o){return a(),i("div",null,p)}const g=s(t,[["render",e]]);export{y as __pageData,g as default};
