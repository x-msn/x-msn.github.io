import{_ as s,c as i,o as a,a2 as t}from"./chunks/framework.BV61Qrc0.js";const y=JSON.parse('{"title":"合约结构","description":"","frontmatter":{},"headers":[],"relativePath":"solidity/contract-struct.md","filePath":"solidity/contract-struct.md"}'),n={name:"solidity/contract-struct.md"},e=t(`<h1 id="合约结构" tabindex="-1">合约结构 <a class="header-anchor" href="#合约结构" aria-label="Permalink to &quot;合约结构&quot;">​</a></h1><p><code>Solidity</code> 合约结构分为三个部分：合约声明、状态变量和合约函数。</p><h2 id="合约声明" tabindex="-1">合约声明 <a class="header-anchor" href="#合约声明" aria-label="Permalink to &quot;合约声明&quot;">​</a></h2><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pragma</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> solidity</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ^0.8.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//版本声明</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">contract</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyContract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//合约声明</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //状态变量和合约函数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="状态变量" tabindex="-1">状态变量： <a class="header-anchor" href="#状态变量" aria-label="Permalink to &quot;状态变量：&quot;">​</a></h2><p>状态变量是在 <code>Solidity</code> 合约中定义的变量。它们可以存储合约的状态数据，并在合约函数之间共享。</p><p>例如，下面的代码声明了一个名为 <code>myVar</code> 的状态变量</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">contract</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyContract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  uint256</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myVar;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="合约函数" tabindex="-1">合约函数： <a class="header-anchor" href="#合约函数" aria-label="Permalink to &quot;合约函数：&quot;">​</a></h2><p>合约函数是在 <code>Solidity</code> 合约中定义的函数，用于操作合约的状态数据。它们可以被合约的外部调用，并且可以接受输入参数和返回值。</p><p>例如，下面的代码定义了一个名为 <code>setMyVar</code> 的合约函数，用于设置 <code>myVar</code> 状态变量的值：</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">contract</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyContract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  uint256</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myVar;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setMyVar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uint256</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _value) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    myVar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _value;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>上面的函数接受一个名为 <code>_value</code> 的参数，用来设置 <code>myVar</code> 的值。</p><p>要调用该函数，需要使用一个 <code>Solidity</code> 编写的合约调用程序，并将参数传递给该函数。</p><p>例如，下面的代码演示了如何使用<code>JavaScript</code>从一个名为 <code>MyContract</code> 的<code>Solidity</code> 合约中调用 <code>setMyVar</code> 函数：</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">const </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">contract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> web3.eth.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Contract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyContract.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">abi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, contractAddress);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">contract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.methods.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setMyVar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({from</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> account});</span></span></code></pre></div><p>上面的代码首先创建了一个名为 <code>contract</code> 的 <code>Solidity</code> 合约实例，然后调用该实例的 <code>setMyVar</code> 函数，传递参数<code>42</code>。</p><p>最后，该函数从一个名为 <code>account</code> 的 <code>Solidity</code> 账户发送。</p>`,18),l=[e];function h(p,k,d,c,o,r){return a(),i("div",null,l)}const g=s(n,[["render",h]]);export{y as __pageData,g as default};
