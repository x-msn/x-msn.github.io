import{_ as i,c as s,o as a,a2 as e}from"./chunks/framework.BV61Qrc0.js";const g=JSON.parse('{"title":"数据类型","description":"","frontmatter":{},"headers":[],"relativePath":"solidity/datatype.md","filePath":"solidity/datatype.md"}'),t={name:"solidity/datatype.md"},l=e(`<h1 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h1><p>编写程序时，变量是必不可少的，它用于存储各种数据信息。</p><p>变量由内存空间所分配，并且会根据使用的不同类型来在操作系统中分配相应的内存空间。</p><p>在 <code>Solidity</code> 中，变量类型主要分为三种：</p><ul><li>值类型</li><li>地址类型</li><li>引用类型。</li></ul><p>这些变量类型可以存储各种不同的数据信息，如整数类型、字符串类型等。</p><h2 id="_1-值类型" tabindex="-1">1. 值类型 <a class="header-anchor" href="#_1-值类型" aria-label="Permalink to &quot;1. 值类型&quot;">​</a></h2><p>值类型是指在声明变量时，该变量既有变量名，也有被赋予的具体数值，这个数值是存在变量所占据的内存空间中的。在 <code>Solidity</code> 中，值类型包括以下几种：</p><ul><li><p>布尔类型(<code>bool</code>) - 布尔类型变量只能存储 true 或 false 这两个值。</p></li><li><p>整型类型(<code>int8-int256, uint8-uint256</code>) - 整型类型变量用于存储整数值，可以根据数值范围来选择使用 <code>int</code> 或 <code>uint</code>。<code>int</code> 是有符号整数类型，可以存储负数；<code>uint</code> 是无符号整数类型，只能存储正数。</p></li><li><p>地址类型(<code>address</code>) - 地址类型变量涉及以太坊网络中的地址值。地址类型用于存储以太坊网络上的地址，需要设置参数，确定可容纳的地址长度。</p></li><li><p>固定长字节数组(<code>bytesN</code>) - 固定长字节数组用于存储固定长度的二进制数据。其中，<code>N</code> 表示字节数。</p></li><li><p>地址字节数组(<code>bytes</code>) - 地址字节数组用于存储长度不固定的二进制数据。</p></li><li><p>定点数(<code>fixed/ufixed</code>) - 定点数用于存储带小数点的数值，可以根据要求选择采用 <code>fixed</code> 或 <code>ufixed</code> 类型。</p></li></ul><p>在 <code>Solidity</code> 中，值类型变量的存储非常简单，只需要在声明变量时给出不同的数据类型即可。</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pragma</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> solidity</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ^0.8.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">contract</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyContract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    uint</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    bytes32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x01020304</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_2-地址类型" tabindex="-1">2. 地址类型 <a class="header-anchor" href="#_2-地址类型" aria-label="Permalink to &quot;2. 地址类型&quot;">​</a></h2><p>地址类型在 <code>Solidity</code> 中用来表示以太坊网络上的地址值，常用于存储以太币或其他代币的所有者地址、智能合约地址等信息。地址类型在 <code>Solidity</code> 中是固定长度的，占用 <code>20</code> 个字节的存储空间。</p><p>在 <code>Solidity</code> 中，可以使用 <code>address</code> 类型来声明一个地址变量。例如：</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">address</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> owner;</span></span></code></pre></div><p>上述代码声明了一个公开的地址类型变量 <code>owner</code>，它用于存储某个智能合约的所有者地址。</p><p>在 <code>Solidity</code> 中，可以使用多种方式来表示地址值，例如：</p><p>直接使用地址字符串表示法，比如：</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">address</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> owner </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>使用其他类型的值来表示地址，比如：</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">address</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> owner </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> payable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">msg.sender</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>其中，<code>msg.sender</code> 代表当前函数调用的发送者地址。</p><p>使用地址字面量来创建地址，比如：</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">address</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> payable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> owner </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> payable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre></div><p>在上述代码中，我们使用了地址字面量，将地址 <code>0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2</code> 转换为地址类型并存储在 <code>owner</code> 变量中。</p><p>需要注意的是，由于 <code>Solidity</code> 中的地址类型包含了以太坊网络上的地址信息，因此在使用地址类型时应该格外小心，以防止地址泄漏或非法使用。</p><h2 id="_3-引用类型" tabindex="-1">3. 引用类型 <a class="header-anchor" href="#_3-引用类型" aria-label="Permalink to &quot;3. 引用类型&quot;">​</a></h2><p>在 <code>Solidity</code> 中，引用类型或复合数据类型是指可以存储多个值的数据类型。以下是引用类型/复合数据类型的几种常见类型：</p><ul><li><p>数组：数组是一组具有相同类型的元素集合。可以使用固定大小或可变大小的数组，可以是元素结构或元素动态数组。</p></li><li><p>结构：结构是不同类型的数据集合。它们是用关键字“struct”来定义的，并且可以在合同的不同地方使用。</p></li><li><p>映射：映射是一种键值对数据结构，其中每个键都有一个相关联的值。可以用来存储状态变量在函数间的共享数据。</p></li><li><p>枚举：枚举是一些有限常量列表的集合。在Solidity中，它们可以用来定义状态变量的状态，从而可以更方便地编写逻辑。</p></li></ul>`,29),p=[l];function d(n,h,k,o,c,r){return a(),s("div",null,p)}const E=i(t,[["render",d]]);export{g as __pageData,E as default};
