import{_ as s,c as i,o as a,a2 as n}from"./chunks/framework.BV61Qrc0.js";const g=JSON.parse('{"title":"引用类型","description":"","frontmatter":{},"headers":[],"relativePath":"solidity/refer.md","filePath":"solidity/refer.md"}'),e={name:"solidity/refer.md"},t=n(`<h1 id="引用类型" tabindex="-1">引用类型 <a class="header-anchor" href="#引用类型" aria-label="Permalink to &quot;引用类型&quot;">​</a></h1><p>在 <code>Solidity</code> 中，数据有多种存储位置，包括内存、存储器和栈。下面是对这些存储位置的简要解释：</p><ol><li>内存（<code>memory</code>）：内存是临时变量的存储位置，只在函数执行期间存在，执行结束后会被清除。</li><li>存储器（<code>storage</code>）：存储器是永久存储变量的地方，数据会一直保存在区块链上，直到合约被删除。同时，存储器的访问较慢，会消耗更多的 <code>gas</code> ，因此应该尽量减少存储在存储器中的数据量。</li><li>栈（<code>stack</code>）：存储特定函数执行期间的临时变量。</li></ol><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><p>下面是一个 <code>Solidity</code> 程序的示例，演示了在存储器中存储一个字符串的过程：</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pragma</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> solidity</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ^0.8.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">contract</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StorageExample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 存储器变量名为name</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> memory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _name) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _name; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将字符串存储在存储器中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> view</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> returns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> memory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 从存储器中读取字符串</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在这个合约中，我们建立了一个名为 <code>StorageExample</code> 的合约，其中包含一个存储器变量名为 <code>name</code>。</p><p><code>setName</code> 函数用于将传入的字符串变量存储在存储器中，<code>getName</code> 函数用于从存储器中读取字符串并返回结果。</p><p>在函数中，我们使用字符串变量类型的内存来传递函数参数，并使用 <code>string memory</code> 作为函数返回类型，以从存储器中获取字符串。</p><p>需要注意的是，在 <code>Solidity</code> 中，存储器变量的初始值为其类型的默认值（例如，一个未初始化的 <code>string</code> 类型变量值为空字符串）。</p><p>在存储器中访问变量时，<code>Solidity</code> 会在存储器中查找其值，并返回结果。如果变量不存在，则会返回其类型的默认值。</p>`,11),l=[t];function p(h,k,d,r,o,c){return a(),i("div",null,l)}const y=s(e,[["render",p]]);export{g as __pageData,y as default};
